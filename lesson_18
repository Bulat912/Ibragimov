1.
class Person:
 def __init__(self, name, age, surname):
 self._name = name
 self._age = age
 self._surname = surname
 def name(self):
 return self._name

 def age(self):
 return self._age

 def surname(self):
 return self._surname

 def set_age(self, new_age):
 self._age = new_age


person = Person("Bulat", 19, "Ibragimov")
print(person.name()) 
print(person.age()) 
print(person.surname())
person.set_age(21) 
print(person.age())

2.
 from abc import ABC, abstractmethod
class Cloth(ABC):
 def __init__(self, name):
 self._name = name

 @abstractmethod
 def fabric_consumption(self):
 pass
class Coat(Cloth):
 def __init__(self, name, size):
 super().__init__(name)
 self._size = size

 def fabric_consumption(self):
 return round(self._size / 6.5 + 0.5, 2)
class Suit(Cloth):
 def __init__(self, name, height):
 super().__init__(name)
 self._height = height

 def fabric_consumption(self):
 return round(2 * self._height + 0.3, 2)
coat1 = Coat('StoneIsland', 46)
coat2 = Coat('Ck', 48)
suit1 = Suit('Hugo Boss', 180)
suit2 = Suit('Nike', 185)
total_fabric_consumption = sum([coat1.fabric_consumption(), coat2.fabric_consumption(),
suit1.fabric_consumption(), suit2.fabric_consumption()])
print(f'Total fabric consumption: {total_fabric_consumption} meters')



3. 
class Box:
 def __init__(self, postcode, name, from_city, target_city):
 self._postcode = postcode
 self._name = name
 self._from_city = from_city
 self._target_city = target_city

 def postcode(self):
 return self._postcode

 def name(self):
 return self._name

 def from_city(self):
 return self._from_city

 def target_city(self):
 return self._target_city

 def set_target_city(self, new_target_city):
 self._target_city = new_target_city
 
 box = Box('2016', 'Bulat', 'Nizhnekamcsk', 'Kazan')
print(box.postcode()) 
print(box.name()) 
print(box.from_city()) 
print(box.target_city()) 


box.set_target_city('Moscow') 
print(box.target_city()) 

4.
from task_3_box import Box
class Truck:
 def __init__(self, capacity):
 self._capacity = capacity
 self._boxes = []

 def __str__(self):
 return f"Truck has {len(self._boxes)} boxes out of {self._capacity}"

 def __add__(self, box):
 if len(self._boxes) < self._capacity:
 self._boxes.append(box)
 return "Box has been loaded into the truck"
 else:
 return "Truck is full"

 def __sub__(self, index):
 if len(self._boxes) > 0 and index < len(self._boxes):
 return self._boxes.pop(index)
 else:
 return "Invalid index or no boxes in the truck"







